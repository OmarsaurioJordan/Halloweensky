<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_randomize();
s_ventana();
date_set_timezone(timezone_utc);
clicdxy[0] = 0;
clicdxy[1] = 0;
view_xview[0] = (room_width + view_wview[0]) / 2;
view_yview[0] = (room_height + view_hview[0]) / 2;
instance_create(0, 0, o_mouse);
ini_open("config.ini");

globalvar dlt, servidor, player, socket, hora, dia, luna;
dlt = 0;
servidor = true;
player = noone;
reloj_respawn = m_respawn_s;

// para evitar disparos duplicados
listadisparos = ds_list_create();
repeat 127 {
    ds_list_add(listadisparos, "");
}

// locales
escala_vision = view_wview[0] / 80;
desfase_vision = view_hview[0] - view_wview[0];
rectw = view_wview[0];
recth = view_hview[0];

// editor
editor_objeto = "Arbol";
editor_tipo = 1;
modo_editor = false;

// gui
hora = 0; // 0:amanecer, 127:anochecer, 255:amanecer
dia = 1; // dias transcurridos sobreviviendo
luna = m_luna_creciente; // se obtiene con el dia
materiales[0] = 0; // comida
materiales[1] = 12; // madera
materiales[2] = 12; // hierro
materiales[3] = 0; // extra ???
estadisticas[0] = 0; // humanos
estadisticas[1] = 0; // monstruos
estadisticas[2] = 0; // astrales
listadonombres = ds_list_create(); // sincronia con losnombres serv/clie
listadoestavivo = ds_list_create(); // sincronia con estavivo serv/clie
nombre = ini_read_string("network", "nombre", "");
dialog_name = get_string_async("Write your player name, max 12 chars " +
    "(change requires restart)", nombre);

// conectar network
socket = network_create_socket_ext(network_socket_udp, m_puerto);
if socket &lt; 0 {
    game_end();
    exit;
}
tiempo_inicio = date_current_datetime();
conexiones = ds_list_create(); // direcciones IP
estavivo = ds_list_create(); // idweb de monigote, 0 nulo
pinguser = ds_list_create(); // temporizador de desconexion
tiemposinicios = ds_list_create(); // tiempo_inicio
estaconectado = ds_list_create(); // true si ya ambos extremos ok
losnombres = ds_list_create(); // server guarda nombres
lasagujas = ds_list_create(); // agujas de los clientes para posicion
loseventos = ds_list_create(); // agujas de los clientes para eventos
losrespawns = ds_list_create(); // para reaparecer jugadores
reloj_broadcast = 0;
puerto_broadcast = 1;
ip_broadcast = ini_read_string("network", "broadcast", "192.168.1.");
dialog_ip = -1;

// envio network
reloj_entes = m_ping;
reloj_player = m_ping - 1;
reloj_gui = m_ping + 1;
aguja_entes = 0;
aguja_player = 0;
aguja_gui = 0;
aguja_evento = 0;
aguja_disparo = 0;

// crear mundo
//s_azar_cosas(0.1, o_arbol, 72);
//s_azar_cosas(0.2, o_decorado, 36);
alarm[0] = 1;

ini_close();

// dificultad
primer_oleada = true;
dificultad = 1; // aumenta cada lunacion
guion = ds_list_create();
ds_list_add(guion, m_grupo_zombi, m_grupo_humano, m_grupo_vampirico,
    m_grupo_infernal, m_grupo_antiguo, m_grupo_especial);
presentados = ds_list_create(); // listado de monstruos que no han aparecido
for (var i = 0; i &lt;= m_ent_ente; i++) {
    if s_grupo_monster(i) != m_grupo_fantasmal {
        ds_list_add(presentados, i);
    }
}

// madera vs hierro
paraventa = irandom(m_herrx_medicina);
costo[m_herr_nada, 0] = 0; costo[m_herr_nada, 1] = 0;
costo[m_herr_guitarra, 0] = 5; costo[m_herr_guitarra, 1] = 1;
costo[m_herr_tambor, 0] = 7; costo[m_herr_tambor, 1] = 0;
costo[m_herr_explosivo, 0] = 4; costo[m_herr_explosivo, 1] = 1;
costo[m_herr_mina, 0] = 3; costo[m_herr_mina, 1] = 2;
costo[m_herr_antorcha, 0] = 3; costo[m_herr_antorcha, 1] = 0;
costo[m_herr_cuchillo, 0] = 1; costo[m_herr_cuchillo, 1] = 1;
costo[m_herr_mazo, 0] = 2; costo[m_herr_mazo, 1] = 6;
costo[m_herr_pico, 0] = 3; costo[m_herr_pico, 1] = 3;
costo[m_herr_hacha, 0] = 3; costo[m_herr_hacha, 1] = 4;
costo[m_herr_espada, 0] = 1; costo[m_herr_espada, 1] = 3;
costo[m_herr_baculo, 0] = 0; costo[m_herr_baculo, 1] = 4;
costo[m_herr_ballesta, 0] = 2; costo[m_herr_ballesta, 1] = 3;
costo[m_herr_lanza, 0] = 3; costo[m_herr_lanza, 1] = 1;
costo[m_herr_pistola, 0] = 1; costo[m_herr_pistola, 1] = 4;
costo[m_herr_escopeta, 0] = 1; costo[m_herr_escopeta, 1] = 6;
costo[m_herr_rifle, 0] = 1; costo[m_herr_rifle, 1] = 5;
costo[m_herr_metralla, 0] = 1; costo[m_herr_metralla, 1] = 7;
costo[m_herrx_escudin, 0] = 0; costo[m_herrx_escudin, 1] = 6;
costo[m_herrx_escudo, 0] = 0; costo[m_herrx_escudo, 1] = 8;
costo[m_herrx_medicina, 0] = 6; costo[m_herrx_medicina, 1] = 0;

// municion vs cadencia_s
costo[m_herr_nada, 2] = 0; costo[m_herr_nada, 3] = 0;
costo[m_herr_guitarra, 2] = 30; costo[m_herr_guitarra, 3] = 1;
costo[m_herr_tambor, 2] = 35; costo[m_herr_tambor, 3] = 2;
costo[m_herr_explosivo, 2] = 25; costo[m_herr_explosivo, 3] = 5;
costo[m_herr_mina, 2] = 25; costo[m_herr_mina, 3] = 6;
costo[m_herr_antorcha, 2] = 30; costo[m_herr_antorcha, 3] = 2.5;
costo[m_herr_cuchillo, 2] = 20; costo[m_herr_cuchillo, 3] = 1;
costo[m_herr_mazo, 2] = 80; costo[m_herr_mazo, 3] = 3;
costo[m_herr_pico, 2] = 60; costo[m_herr_pico, 3] = 2;
costo[m_herr_hacha, 2] = 70; costo[m_herr_hacha, 3] = 2;
costo[m_herr_espada, 2] = 40; costo[m_herr_espada, 3] = 1.5;
costo[m_herr_baculo, 2] = 20; costo[m_herr_baculo, 3] = 1.5;
costo[m_herr_ballesta, 2] = 25; costo[m_herr_ballesta, 3] = 1.5;
costo[m_herr_lanza, 2] = 20; costo[m_herr_lanza, 3] = 3;
costo[m_herr_pistola, 2] = 25; costo[m_herr_pistola, 3] = 1;
costo[m_herr_escopeta, 2] = 35; costo[m_herr_escopeta, 3] = 2.5;
costo[m_herr_rifle, 2] = 30; costo[m_herr_rifle, 3] = 2;
costo[m_herr_metralla, 2] = 40; costo[m_herr_metralla, 3] = 0.5;
costo[m_herrx_escudin, 2] = 0; costo[m_herrx_escudin, 3] = 2;
costo[m_herrx_escudo, 2] = 0; costo[m_herrx_escudo, 3] = 1;
costo[m_herrx_medicina, 2] = 0; costo[m_herrx_medicina, 3] = 3;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open

if !file_exists("mapa.ini") {
    exit;
}
ini_open("mapa.ini");

var xx, yy, aux;
var n = 0;
while ini_key_exists("o_arbol", "x" + string(n)) {
    xx = real(ini_read_string("o_arbol", "x" + string(n), "0"));
    yy = real(ini_read_string("o_arbol", "y" + string(n), "0"));
    aux = instance_create(xx, yy, o_arbol);
    aux.tipo = real(ini_read_string("o_arbol", "t" + string(n), "0"));
    if aux.tipo &lt;= 6 {
        //aux.tipo = irandom(6);
    }
    n++;
}

n = 0;
while ini_key_exists("o_mobiliario", "x" + string(n)) {
    xx = real(ini_read_string("o_mobiliario", "x" + string(n), "0"));
    yy = real(ini_read_string("o_mobiliario", "y" + string(n), "0"));
    aux = instance_create(xx, yy, o_mobiliario);
    aux.tipo = real(ini_read_string("o_mobiliario", "t" + string(n), "0"));
    n++;
}

n = 0;
while ini_key_exists("o_decorado", "x" + string(n)) {
    xx = real(ini_read_string("o_decorado", "x" + string(n), "0"));
    yy = real(ini_read_string("o_decorado", "y" + string(n), "0"));
    aux = instance_create(xx, yy, o_decorado);
    aux.tipo = real(ini_read_string("o_decorado", "t" + string(n), "0"));
    if aux.tipo &gt;= 1 and aux.tipo &lt;= 6 {
        //aux.tipo = irandom_range(1, 6);
    }
    n++;
}

n = 0;
while ini_key_exists("o_casa", "x" + string(n)) {
    xx = real(ini_read_string("o_casa", "x" + string(n), "0"));
    yy = real(ini_read_string("o_casa", "y" + string(n), "0"));
    instance_create(xx, yy, o_casa);
    n++;
}

ini_close();

// crear fauna natural y recursos

repeat instance_number(o_casa) {
    instance_create(random(room_width), random(room_height), o_animal);
}

with o_casa {
    aux = instance_create(x + random_range(-10, 10),
        y + random_range(-10, 10), o_humano);
    aux.genero = irandom(1);
}

with o_arbol {
    if tipo == 7 {
        aux = instance_create(x, y, o_recurso);
        aux.material = m_mat_madera;
    }
    else if tipo == 9 {
        aux = instance_create(x, y, o_recurso);
        aux.material = m_mat_metal;
    }
}
with o_mobiliario {
    if tipo == 1 {
        aux = instance_create(x, y, o_recurso);
        aux.material = m_mat_maiz;
    }
    else if tipo == 2 {
        aux = instance_create(x, y, o_recurso);
        aux.fogata = true;
        instance_create(x, y, o_luz);
    }
}

with o_decorado {
    if tipo == 7 {
        instance_create(x, y, o_luz);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control

// conteo del tiempo
dlt = min(0.1, delta_time * 0.000001);
if servidor {
    var anth = hora;
    hora += dlt * m_vel_dia;
    // nuevo dia, amanecer
    if hora &gt; 255 {
        hora -= 255;
        dia++;
        // luna
        var d = dia - 1;
        while d &gt; 3 {
            d -= 4;
        }
        luna = d;
        // es nueva lunacion
        if luna == m_luna_creciente {
            if ds_list_empty(guion) {
                dificultad++;
            }
            else {
                ds_list_delete(guion, 0);
            }
        }
        // generacion humanos
        var puertas = instance_number(o_casa);
        var cupo = puertas * 2 - instance_number(o_humano);
        var gen;
        repeat cupo {
            if materiales[0] &gt;= m_comida_humano {
                materiales[0] -= m_comida_humano;
                gen = instance_find(o_casa, irandom(puertas - 1));
                gen = instance_create(gen.x + random_range(-10, 10),
                    gen.y + random_range(-10, 10), o_humano);
                gen.genero = 2;
            }
            else {
                break;
            }
        }
        // codigo extra, no critico
        with o_humano {
            hogar = noone;
        }
    }
    // nueva noche, atardecer, generacion monstruos
    if anth &lt; 127 and hora &gt;= 127 {
        if primer_oleada {
            primer_oleada = false;
            // solo esqueletos
            s_oleada(s_dificultad(), false, m_ent_esqueleto, -1);
        }
        else if ds_list_empty(guion) {
            if !ds_list_empty(presentados) or random(1) &lt; 0.5 {
                // agrupados hasta que todos se presenten
                s_oleada(s_dificultad(), true, -1, -1);
            }
            else {
                // todos mexclados
                s_oleada(s_dificultad(), false, -1, -1);
            }
        }
        else {
            // grupo especificos segun guion
            s_oleada(s_dificultad(), false, -1, ds_list_find_value(guion, 0));
        }
    }
}
else if random(1) &lt; 0.1 {
    // luna para clientes
    var d = dia - 1;
    while d &gt; 3 {
        d -= 4;
    }
    luna = d;
}

// hacer invisibles a los objetos fuera de vista
var vist = view_wview[0] / 2;
var ppx = view_xview[0] + vist;
var ppy = view_yview[0] + vist + desfase_vision;
vist -= 16;
if !modo_editor {
    with o_visible {
        visible = point_distance(xi, yi, ppx, ppy) &lt; vist;
    }
}

// posicionar la camara
if player == noone {
    s_cam_move();
}
else {
    var cmx = (player.x + o_mouse.x) / 2;
    var cmy = (player.y + o_mouse.y) / 2;
    var dist = point_distance(ppx, ppy, cmx, cmy);
    if dist &gt; 16 {
        direction = point_direction(ppx, ppy, cmx, cmy);
        dist = min(m_velocidad * 2, dist * dlt * 2);
        view_xview[0] += lengthdir_x(dist, direction);
        view_yview[0] += lengthdir_y(dist, direction);
        s_cam_limit();
    }
}

// broadcast busca equipos
if reloj_broadcast != -1 {
    reloj_broadcast -= dlt;
    if reloj_broadcast &lt;= 0 {
        s_udp_hola(ip_broadcast + string(puerto_broadcast), tiempo_inicio);
        puerto_broadcast++;
        if puerto_broadcast &gt;= 255 {
            reloj_broadcast = -1;
        }
        else {
            reloj_broadcast = 0.05;
        }
        
    }
}

// disminuir ping
for (var i = ds_list_size(pinguser) - 1; i &gt;= 0; i--) {
    var p = ds_list_find_value(pinguser, i) - dlt;
    if p &lt;= 0 {
        s_conexiones_del(i);
    }
    else {
        ds_list_replace(pinguser, i, p);
    }
}

// enviar datos
if servidor {
    reloj_entes -= dlt;
    if reloj_entes &lt;= 0 {
        reloj_entes = random_range(0.1, 0.2);
        s_udp_entes();
    }
    reloj_gui -= dlt;
    if reloj_gui &lt;= 0 {
        reloj_gui = random_range(1, 2);
        s_udp_gui();
    }
}
else {
    reloj_player -= dlt;
    if reloj_player &lt;= 0 {
        reloj_player = random_range(0.1, 0.2);
        if player != noone {
            s_udp_posicion(player);
        }
        else {
            s_udp_ping();
        }
    }
}

// obtener fantasmas
if random(1) &lt; 0.1 {
    estadisticas[2] = instance_number(o_astral);
}

// respawn jugadores
if servidor {
    // jugador del servidor
    if player == noone {
        reloj_respawn -= dlt;
        if reloj_respawn &lt;= 0 {
            player = s_deme_disponible();
            if player == noone {
                reloj_respawn = 1;
            }
            else {
                reloj_respawn = m_respawn_s;
            }
        }
    }
    // otros jugadores
    var rr;
    for (var i = 0; i &lt; ds_list_size(losrespawns); i++) {
        if ds_list_find_value(estavivo, i) == 0 {
            rr = ds_list_find_value(losrespawns, i) - dlt;
            if rr &lt;= 0 {
                var quien = s_deme_disponible();
                if quien == noone {
                    ds_list_replace(losrespawns, i, 1);
                }
                else {
                    ds_list_replace(losrespawns, i, m_respawn_s);
                    ds_list_replace(estavivo, i, quien.idweb);
                }
            }
            else {
                ds_list_replace(losrespawns, i, rr);
            }
        }
    }
}

// comandos
if keyboard_check_pressed(vk_anykey) {
    switch keyboard_key {
        
        case vk_escape: // salir
            game_end();
            break;
        
        case vk_f1: // ayuda y titulo
            break;
        
        case vk_f2: // cambio IP
            if dialog_ip == -1 {
                dialog_ip = get_string_async("Type the LAN IP " +
                    "(change requires restart), " +
                    "def: 192.168.1.x", ip_broadcast + "x");
            }
            break;
        
        case vk_f3: // manual PDF
            break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Editor

if modo_editor {
    s_cam_zoom();
    if mouse_check_button_pressed(mb_left) and !keyboard_check(vk_shift) {
        if !collision_point(mouse_x, mouse_y, o_visible, true, false) {
            var aux;
            switch editor_objeto {
                case "Arbol":
                    aux = instance_create(mouse_x, mouse_y, o_arbol);
                    aux.tipo = editor_tipo;
                    break;
                case "Mobiliario":
                    aux = instance_create(mouse_x, mouse_y, o_mobiliario);
                    aux.tipo = editor_tipo;
                    break;
                case "Decorado":
                    aux = instance_create(mouse_x, mouse_y, o_decorado);
                    aux.tipo = editor_tipo;
                    break;
                case "Casa":
                    instance_create(mouse_x, mouse_y, o_casa);
                    break;
            }
        }
    }
    else if mouse_check_button(mb_left) and keyboard_check(vk_shift) {
        var otro = collision_point(mouse_x, mouse_y,
            o_bloque, true, false);
        if otro == noone {
            otro = collision_point(mouse_x, mouse_y,
                o_decorado, true, false);
        }
        if otro != noone {
            with otro {
                instance_destroy();
            }
        }
    }
    if keyboard_check_pressed(vk_anykey) {
        switch keyboard_key {
            case vk_up:
                switch editor_objeto {
                    case "Arbol":
                        editor_objeto = "Mobiliario";
                        break;
                    case "Mobiliario":
                        editor_objeto = "Decorado";
                        break;
                    case "Decorado":
                        editor_objeto = "Casa";
                        break;
                    case "Casa":
                        editor_objeto = "Arbol";
                        break;
                }
                editor_tipo = 1;
                break;
            case vk_down:
                switch editor_objeto {
                    case "Arbol":
                        editor_objeto = "Casa";
                        break;
                    case "Mobiliario":
                        editor_objeto = "Arbol";
                        break;
                    case "Decorado":
                        editor_objeto = "Mobiliario";
                        break;
                    case "Casa":
                        editor_objeto = "Decorado";
                        break;
                }
                editor_tipo = 1;
                break;
            case vk_left:
                switch editor_objeto {
                    case "Arbol":
                        editor_tipo--;
                        if editor_tipo &lt; 0 {
                            editor_tipo = sprite_get_number(d_arbol) - 1;
                        }
                        break;
                    case "Mobiliario":
                        editor_tipo--;
                        if editor_tipo &lt; 1 {
                            editor_tipo = sprite_get_number(d_pueblo) - 1;
                        }
                        break;
                    case "Decorado":
                        editor_tipo--;
                        if editor_tipo &lt; 0 {
                            editor_tipo = sprite_get_number(d_decorado) - 1;
                        }
                        break;
                }
                break;
            case vk_right:
                switch editor_objeto {
                    case "Arbol":
                        editor_tipo++;
                        if editor_tipo &gt;= sprite_get_number(d_arbol) {
                            editor_tipo = 0;
                        }
                        break;
                    case "Mobiliario":
                        editor_tipo++;
                        if editor_tipo &gt;= sprite_get_number(d_pueblo) {
                            editor_tipo = 1;
                        }
                        break;
                    case "Decorado":
                        editor_tipo++;
                        if editor_tipo &gt;= sprite_get_number(d_decorado) {
                            editor_tipo = 0;
                        }
                        break;
                }
                break;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UDP

var receive_ip = ds_map_find_value(async_load, "ip");
var buf = ds_map_find_value(async_load, "buffer");
buffer_seek(buf, buffer_seek_start, 0);
if buffer_read(buf, buffer_u16) == m_network_id {
    switch buffer_read(buf, buffer_u8) {
        
        case 0: // hola
            var version = buffer_read(buf, buffer_u8);
            var otro_inicio = buffer_read(buf, buffer_f64);
            var otro_nombre = buffer_read(buf, buffer_string);
            if tiempo_inicio == otro_inicio {
                // nada, es el mismo PC
            }
            else if version &gt; m_version {
                show_message("Error, obsolete version");
                game_end();
            }
            else if version &lt; m_version {
                s_udp_shutdown(receive_ip, m_error_version);
            }
            else if servidor {
                if otro_inicio &lt; tiempo_inicio {
                    // otro es servidor
                    servidor = false;
                    s_conexiones_add(receive_ip, otro_inicio, true, otro_nombre);
                }
                else {
                    // sigue siendo servidor y agrega al cliente
                    s_conexiones_add(receive_ip, otro_inicio, false, otro_nombre);
                }
            }
            else if otro_inicio &lt; tiempo_inicio {
                var okey = ds_list_empty(conexiones);
                if !okey {
                    okey = otro_inicio &lt; ds_list_find_value(tiemposinicios, 0);
                }
                if okey {
                    // otro es servidor
                    s_conexiones_add(receive_ip, otro_inicio, true, otro_nombre);
                }
            }
            else if ds_list_empty(conexiones) {
                // ahora es servidor
                servidor = true;
                s_conexiones_add(receive_ip, otro_inicio, true, otro_nombre);
            }
            break;
        
        case 1: // shutdown
            var cod = buffer_read(buf, buffer_u8);
            switch cod {
                case m_error_version:
                    show_message("Error, obsolete version");
                    break;
                case m_error_nombre:
                    show_message("Error, repeated name in the network");
                    break;
            }
            game_end();
            break;
        
        case 2: // entes
            if !servidor {
                var aguja = buffer_read(buf, buffer_u8);
                if aguja &gt; aguja_entes or (aguja_entes - aguja) &gt; 127 {
                    aguja_entes = aguja;
                }
                else {
                    break;
                }
                // leer humanos
                var tot = buffer_read(buf, buffer_u16);
                estadisticas[0] = tot;
                with o_humano {
                    sacarlo = true;
                }
                var receive, aux, munis;
                repeat tot {
                    receive[0] = buffer_read(buf, buffer_u16); // idweb
                    receive[1] = buffer_read(buf, buffer_u16); // x
                    receive[2] = buffer_read(buf, buffer_u16); // y
                    receive[3] = buffer_read(buf, buffer_u8); // genero
                    receive[4] = buffer_read(buf, buffer_u8); // herramienta
                    for (var e = 0; e &lt; m_herr_total; e++) { // municiones
                        munis[e] = buffer_read(buf, buffer_u8);
                    }
                    receive[5] = buffer_read(buf, buffer_u8); // material
                    receive[6] = buffer_read(buf, buffer_u8); // vida
                    receive[7] = buffer_read(buf, buffer_s8); // flag_herramienta
                    aux = noone;
                    with o_humano {
                        if idweb == receive[0] {
                            if player != id {
                                x = receive[1];
                                y = receive[2];
                                herramienta = receive[4];
                            }
                            sacarlo = false;
                            aux = id;
                            break;
                        }
                    }
                    if aux == noone {
                        aux = instance_create(receive[1], receive[2], o_humano);
                        aux.idweb = receive[0];
                        aux.herramienta = receive[4];
                    }
                    with aux {
                        genero = receive[3];
                        for (var e = 0; e &lt; m_herr_total; e++) {
                            ds_list_replace(municiones, e, munis[e]);
                        }
                        material = receive[5];
                        vida = receive[6];
                        if receive[7] != -1 {
                            herramienta = receive[7];
                        }
                    }
                }
                with o_humano {
                    if sacarlo {
                        instance_destroy();
                    }
                }
                // leer monstruos
                tot = buffer_read(buf, buffer_u16);
                estadisticas[1] = tot;
                with o_monstruo {
                    sacarlo = true;
                }
                repeat tot {
                    receive[0] = buffer_read(buf, buffer_u16); // idweb
                    receive[1] = buffer_read(buf, buffer_u16); // x
                    receive[2] = buffer_read(buf, buffer_u16); // y
                    receive[3] = buffer_read(buf, buffer_u8); // tipo
                    aux = noone;
                    with o_monstruo {
                        if idweb == receive[0] {
                            x = receive[1];
                            y = receive[2];
                            sacarlo = false;
                            if tipo != receive[3] {
                                tipo = receive[3];
                                sprite = s_sprite_monster(receive[3]);
                            }
                            aux = id;
                            break;
                        }
                    }
                    if aux == noone {
                        aux = instance_create(receive[1], receive[2], o_monstruo);
                        aux.tipo = receive[3];
                        aux.sprite = s_sprite_monster(receive[3]);
                        aux.idweb = receive[0];
                    }
                }
                with o_monstruo {
                    if sacarlo {
                        instance_destroy();
                    }
                }
                // leer animales
                tot = buffer_read(buf, buffer_u16);
                with o_animal {
                    sacarlo = true;
                }
                repeat tot {
                    receive[0] = buffer_read(buf, buffer_u16); // idweb
                    receive[1] = buffer_read(buf, buffer_u16); // x
                    receive[2] = buffer_read(buf, buffer_u16); // y
                    aux = noone;
                    with o_animal {
                        if idweb == receive[0] {
                            x = receive[1];
                            y = receive[2];
                            sacarlo = false;
                            aux = id;
                            break;
                        }
                    }
                    if aux == noone {
                        aux = instance_create(receive[1], receive[2], o_animal);
                        aux.idweb = receive[0];
                    }
                }
                with o_animal {
                    if sacarlo {
                        instance_destroy();
                    }
                }
                // resetear ping
                var p = ds_list_find_index(conexiones, receive_ip);
                if p != -1 {
                    ds_list_replace(pinguser, p, m_ping);
                }
            }
            break;
        
        case 3: // gui
            if !servidor {
                var aguja = buffer_read(buf, buffer_u8);
                if aguja &gt; aguja_gui or (aguja_gui - aguja) &gt; 127 {
                    aguja_gui = aguja;
                }
                else {
                    break;
                }
                // leer datos
                hora = buffer_read(buf, buffer_u8);
                dia = buffer_read(buf, buffer_u16);
                for (var i = 0; i &lt; array_length_1d(materiales); i++) {
                    materiales[i] = buffer_read(buf, buffer_u16);
                }
                // crear lista
                ds_list_clear(listadonombres);
                ds_list_clear(listadoestavivo);
                var tot = buffer_read(buf, buffer_u8);
                var receive;
                repeat tot {
                    receive[0] = buffer_read(buf, buffer_string);
                    receive[1] = buffer_read(buf, buffer_u16);
                    if nombre == receive[0] {
                        if receive[1] == 0 {
                            player = noone;
                        }
                        else {
                            with o_humano {
                                if idweb == receive[1] {
                                    player = id;
                                    break;
                                }
                            }
                        }
                    }
                    else {
                        ds_list_add(listadonombres, receive[0]);
                        ds_list_add(listadoestavivo, receive[1]);
                    }
                }
            }
            break;
        
        case 4: // posicion
            if servidor {
                var aguja = buffer_read(buf, buffer_u8);
                var receive;
                receive[0] = buffer_read(buf, buffer_u16); // idweb
                receive[1] = buffer_read(buf, buffer_u16); // x
                receive[2] = buffer_read(buf, buffer_u16); // y
                receive[3] = buffer_read(buf, buffer_u8); // herramienta
                var i = ds_list_find_index(conexiones, receive_ip);
                if i == -1 {
                    break;
                }
                if ds_list_find_value(estavivo, i) != receive[0] {
                    break;
                }
                var a = ds_list_find_value(lasagujas, i);
                if aguja &gt; a or (a - aguja) &gt; 127 {
                    ds_list_replace(lasagujas, i, aguja);
                }
                else {
                    break;
                }
                with o_humano {
                    if idweb == receive[0] {
                        x = receive[1];
                        y = receive[2];
                        herramienta = receive[3];
                        break;
                    }
                }
                // resetear ping
                var p = ds_list_find_index(conexiones, receive_ip);
                if p != -1 {
                    ds_list_replace(pinguser, p, m_ping);
                }
            }
            break;
        
        case 5: // ping solamente
            var p = ds_list_find_index(conexiones, receive_ip);
            if p != -1 {
                ds_list_replace(pinguser, p, m_ping);
            }
            break;
        
        case 6: // crafting
            if servidor {
                var aguja = buffer_read(buf, buffer_u8);
                var receive;
                receive[0] = buffer_read(buf, buffer_u16); // idweb
                receive[1] = buffer_read(buf, buffer_u8); // herramienta
                var i = ds_list_find_index(conexiones, receive_ip);
                if i == -1 {
                    break;
                }
                if ds_list_find_value(estavivo, i) != receive[0] {
                    break;
                }
                var a = ds_list_find_value(loseventos, i);
                if aguja &gt; a or (a - aguja) &gt; 127 {
                    ds_list_replace(loseventos, i, aguja);
                }
                else {
                    break;
                }
                s_crafting(receive[0], receive[1]);
            }
            break;
        
        case 7: // disparo
            var aguja = buffer_read(buf, buffer_u8);
            var receive;
            receive[0] = buffer_read(buf, buffer_u16); // x
            receive[1] = buffer_read(buf, buffer_u16); // y
            receive[2] = buffer_read(buf, buffer_u16); // direccion
            receive[3] = buffer_read(buf, buffer_u8); // tipo
            receive[4] = buffer_read(buf, buffer_u8); // dehumano
            receive[5] = buffer_read(buf, buffer_u16); // origen idweb
            // verificar que no se repite
            var ticket = string(receive[5]) + "_" + string(aguja);
            if ds_list_find_index(listadisparos, ticket) != -1 {
                break;
            }
            ds_list_add(listadisparos, ticket);
            ds_list_delete(listadisparos, 0);
            s_udp_disparo(receive[0], receive[1], receive[2],
                receive[3], receive[4], receive[5], false);
            // funciones propias del servidor
            if servidor {
                // disminuir municion
                with o_humano {
                    if idweb == receive[5] {
                        var mmm = ds_list_find_value(municiones, receive[3]);
                        ds_list_replace(municiones, receive[3], max(0, mmm - 1));
                        break;
                    }
                }
                // re-envio
                var tell = ds_map_find_value(async_load, "size");
                var ipp;
                for (var c = 0; c &lt; ds_list_size(conexiones); c++) {
                    ipp = ds_list_find_value(conexiones, c);
                    if ipp != receive_ip {
                        network_send_udp_raw(socket, ipp, m_puerto, buf, tell);
                    }
                }
            }
            break;
        
        case 8: // intercambio
            if servidor {
                var aguja = buffer_read(buf, buffer_u8);
                var receive;
                receive[0] = buffer_read(buf, buffer_u16); // idweb1
                receive[1] = buffer_read(buf, buffer_u16); // idweb2
                var i = ds_list_find_index(conexiones, receive_ip);
                if i == -1 {
                    break;
                }
                if ds_list_find_value(estavivo, i) != receive[0] {
                    break;
                }
                var a = ds_list_find_value(loseventos, i);
                if aguja &gt; a or (a - aguja) &gt; 127 {
                    ds_list_replace(loseventos, i, aguja);
                }
                else {
                    break;
                }
                var t = 0;
                for (var i = 0; i &lt; 2; i++) {
                    with o_humano {
                        if idweb == receive[i] {
                            receive[i] = id;
                            t++;
                            break;
                        }
                    }
                }
                if t == 2 {
                    s_intercambio(receive[0], receive[1]);
                }
            }
            break;
    }
}
buffer_delete(buf);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Message

var key = ds_map_find_value(async_load, "id");
if key == dialog_ip {
    dialog_ip = -1;
    if ds_map_find_value(async_load, "status") {
        var txt = ds_map_find_value(async_load, "result");
        if txt != ip_broadcast + "x" {
            txt = s_split(string_replace(txt, "x", ""), ".", true);
            if is_array(txt) {
                if array_length_1d(txt) == 3 {
                    for (var i = 0; i &lt; 3; i++) {
                        txt[i] = string_digits(txt[i]);
                        if txt[i] == "" {
                            txt[i] = "0";
                        }
                        txt[i] = string(clamp(floor(real(txt[i])), 0, 255));
                    }
                    ini_open("config.ini");
                    ini_write_string("network", "broadcast",
                        txt[0] + "." + txt[1] + "." + txt[2] + ".");
                    ini_close();
                    game_end();
                }
            }
        }
    }
}
else if key == dialog_name {
    dialog_name = -1;
    if ds_map_find_value(async_load, "status") {
        var txt = ds_map_find_value(async_load, "result");
        txt = string_lettersdigits(txt);
        if txt != "" {
            txt = string_copy(txt, 1, min(string_length(txt), 12));
        }
        if txt != nombre {
            ini_open("config.ini");
            ini_write_string("network", "nombre", txt);
            ini_close();
            game_end();
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save

if socket &gt;= 0 {
    network_destroy(socket);
}

// save

if !modo_editor {
    exit;
}
if file_exists("mapa.ini") {
    file_delete("mapa.ini");
}
ini_open("mapa.ini");

var n = 0;
with o_arbol {
    ini_write_string("o_arbol", "x" + string(n), string(x));
    ini_write_string("o_arbol", "y" + string(n), string(y));
    ini_write_string("o_arbol", "t" + string(n), string(tipo));
    n++;
}

n = 0;
with o_mobiliario {
    ini_write_string("o_mobiliario", "x" + string(n), string(x));
    ini_write_string("o_mobiliario", "y" + string(n), string(y));
    ini_write_string("o_mobiliario", "t" + string(n), string(tipo));
    n++;
}

n = 0;
with o_decorado {
    ini_write_string("o_decorado", "x" + string(n), string(x));
    ini_write_string("o_decorado", "y" + string(n), string(y));
    ini_write_string("o_decorado", "t" + string(n), string(tipo));
    n++;
}

n = 0;
with o_casa {
    ini_write_string("o_casa", "x" + string(n), string(x));
    ini_write_string("o_casa", "y" + string(n), string(y));
    n++;
}

ini_close();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI

var xx = view_xview[0];
var yy = view_yview[0];
if modo_editor {
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    var e = view_wview[0] / 768;
    draw_text_transformed_colour(xx, yy,
        editor_objeto + " - " + string(editor_tipo),
        e, e, 0, c_aqua, c_aqua, c_aqua, c_aqua, 1);
}
else {
    var esc = 0.666;
    
    // informacion de costo de objetos en fogata
    with o_mobiliario {
        if tipo == 2 {
            if escoliding {
                if o_control.paraventa != m_herr_nada {
                    draw_sprite_ext(d_crafting, 0, x, y,
                        1, 1, 0, c_white, 0.75);
                    draw_sprite(d_crafting, 1, x, y);
                    draw_set_valign(fa_middle);
                    draw_set_halign(fa_left);
                    var ccc = c_black;
                    if o_control.costo[o_control.paraventa, 0] &gt; o_control.materiales[1] {
                        ccc = c_red;
                    }
                    draw_text_transformed_colour(x + 65, y - 201,
                        string(o_control.costo[o_control.paraventa, 0]),
                        1.5, 1.5, 0, ccc, ccc, ccc, ccc, 1);
                    ccc = c_black;
                    if o_control.costo[o_control.paraventa, 1] &gt; o_control.materiales[2] {
                        ccc = c_red;
                    }
                    draw_text_transformed_colour(x + 65, y - 141,
                        string(o_control.costo[o_control.paraventa, 1]),
                        1.5, 1.5, 0, ccc, ccc, ccc, ccc, 1);
                    draw_sprite_ext(d_crafting, 1 + o_control.paraventa,
                        x, y, 1, 1, 0, c_white, 1);
                }
                else {
                    draw_sprite_ext(d_crafting, 0, x, y,
                        1, 1, 0, c_white, 0.75);
                }
                draw_sprite(d_crafting, 22, x, y + 110 * (o_control.paraventa / 20));
            }
            break;
        }
    }
    
    // reloj con hora y dia
    draw_sprite_ext(d_tiempo, 0, xx, yy, esc, esc, 0, c_white, 1);
    draw_sprite_ext(d_aguja, 0, xx + 83 * esc, yy + 75 * esc, esc, esc,
        (-hora / 255) * 360 - 90, c_white, 1);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    draw_text_transformed_colour(xx + 83 * esc, yy + 209 * esc,
        string(dia),
        2.5 * esc, 2.5 * esc, 0, c_black, c_black, c_black, c_black, 1);
    if hora &lt; 127 {
        draw_sprite_ext(d_tiempo, 1, xx, yy, esc, esc, 0, c_white, 1);
    }
    else {
        draw_sprite_ext(d_tiempo, 2 + luna, xx, yy, esc, esc, 0, c_white, 1);
    }
    
    // estadisticas de entidades
    draw_set_valign(fa_middle);
    draw_set_halign(fa_right);
    for (var i = array_length_1d(estadisticas) - 1; i &gt;= 0; i--) {
        draw_sprite_ext(d_monstersgui, i, xx + rectw, yy + 60 * esc + i * 80 * esc,
            0.8 * esc, 0.8 * esc, 0, c_white, 1);
        draw_text_transformed_colour(xx + rectw - 90 * esc, yy + 60 * esc + i * 80 * esc,
            string(estadisticas[i]), 2 * esc, 2 * esc, 0,
            c_white, c_white, c_white, c_white, 1);
    }
    
    // materiales recolectados
    draw_set_valign(fa_middle);
    draw_set_halign(fa_left);
    for (var i = 0; i &lt; array_length_1d(materiales) - 1; i++) {
        draw_sprite_ext(d_itemsgui, i, xx, yy + recth - 50 * esc - i * 72 * esc,
            0.8 * esc, 0.8 * esc, 0, c_white, 1);
        draw_text_transformed_colour(xx + 80 * esc, yy + recth - 50 * esc - i * 72 * esc,
            string(materiales[i]), 2 * esc, 2 * esc, 0,
            c_white, c_white, c_white, c_white, 1);
    }
    
    // estadisticas networking
    draw_set_valign(fa_bottom);
    draw_set_halign(fa_right);
    var nnn, vvv;
    if servidor {
        draw_text_transformed_colour(xx + rectw, yy + recth,
            "(F2) Server ", 2.5 * esc, 2.5 * esc, 0, c_white, c_white, c_white, c_white, 1);
        nnn = losnombres;
        vvv = estavivo;
    }
    else {
        draw_text_transformed_colour(xx + rectw, yy + recth,
            "(F2) Client ", 2.5 * esc, 2.5 * esc, 0, c_white, c_white, c_white, c_white, 1);
        nnn = listadonombres;
        vvv = listadoestavivo;
    }
    for (var i = 0; i &lt; ds_list_size(nnn); i++) {
        if ds_list_find_value(vvv, i) == 0 {
            draw_text_transformed_colour(xx + rectw, yy + recth - 32 - i * 24,
                ds_list_find_value(nnn, i) + " - ",
                2 * esc, 2 * esc, 0, c_gray, c_gray, c_gray, c_gray, 1);
        }
        else {
            draw_text_transformed_colour(xx + rectw, yy + recth - 32 - i * 24,
                ds_list_find_value(nnn, i) + " - ",
                2 * esc, 2 * esc, 0, c_white, c_white, c_white, c_white, 1);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sombras

var xx = view_xview[0];
var yy = view_yview[0];

// oscuridad fondo
var sss = surface_create(rectw, recth);
surface_set_target(sss);
draw_clear_alpha(c_black, 1);
var h = hora / 255;
var alp;
if h &gt; 0.1 and h &lt; 0.4 { // dia
    alp = 0;
}
else if h &gt; 0.6 and h &lt; 0.9 { // noche
    alp = m_oscuridad;
}
else if h &gt;= 0.4 and h &lt;= 0.6 { // atardecer
    alp = lerp(0, m_oscuridad, (h - 0.4) / 0.2);
}
else { // amanecer
    if h &gt; 0.5 {
        alp = lerp(m_oscuridad, 0, (h - 0.9) / 0.2);
    }
    else {
        alp = lerp(m_oscuridad, 0, (h + 0.1) / 0.2);
    }
}
draw_set_blend_mode(bm_subtract);
if alp != 0 {
    with o_luz {
        draw_sprite_ext(d_luz, 0, x - xx, y - yy, 2 * radio, 2 * radio, 0, c_white, 1);
    }
    with o_humano {
        if herramienta == m_herr_antorcha {
            if ds_list_find_value(municiones, herramienta) != 0 {
                draw_sprite_ext(d_luz, 0, x - xx, y - yy, 2 * radio, 2 * radio, 0, c_white, 1);
            }
        }
    }
}
draw_set_blend_mode(bm_normal);
surface_reset_target();
draw_surface_ext(sss, xx, yy, 1, 1, 0, c_white, alp);
surface_free(sss);

// sombras
with o_movil {
    if visible {
        draw_sprite(d_sombra, 0, xi, yi);
    }
}
with o_astral {
    if visible {
        draw_sprite(d_sombra, 1, xi, yi);
    }
}
with o_proyectil {
    if visible {
        var d = 0;
        if tipo == 12 or tipo == 13 {
            d = direction;
        }
        draw_sprite_ext(d_proyesombra, tipo, x, y,
            1, 1, d, c_white, 1);
    }
}

// circulo oscuro de vision
if !modo_editor {
    draw_sprite_ext(d_vision, 0, xx, yy + recth, escala_vision,
        escala_vision, 0, c_white, 1);
    draw_rectangle_colour(xx, yy, xx + rectw, yy +
        desfase_vision, c_black, c_black, c_black,
        c_black, false);
}

// linea mouse
if player != noone {
    draw_set_alpha(0.5);
    draw_line_width_colour(player.x, player.y, o_mouse.x, o_mouse.y,
        2, c_lime, c_lime);
    draw_set_alpha(1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
